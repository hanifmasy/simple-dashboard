{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      username: '',\n      errorMessage: '',\n      assets: [],\n      cityFilter: '',\n      contFilter: '',\n      cityAssetCount: 0,\n      continentAssetCount: 0\n    };\n  },\n  computed: {\n    filteredAssets() {\n      let filtered = this.assets;\n      if (this.cityFilter) {\n        filtered = filtered.filter(asset => asset.location.toLowerCase().includes(this.cityFilter.toLowerCase()));\n      }\n      if (this.contFilter) {\n        filtered = filtered.filter(asset => asset.continent.toLowerCase().includes(this.contFilter.toLowerCase()));\n      }\n      return filtered;\n    },\n    cityOptions() {\n      let cities = this.assets.map(item => item.location);\n      return cities;\n    },\n    contOptions() {\n      const uniqueContinents = new Set(this.assets.map(item => item.continent.toLowerCase()));\n      return [...uniqueContinents];\n    },\n    calculateAssetCounts() {\n      const cityCounts = {};\n      const continentCounts = {};\n      this.assets.forEach(asset => {\n        const city = asset.location.toLowerCase();\n        const continent = asset.continent.toLowerCase();\n        cityCounts[city] = (cityCounts[city] || 0) + 1;\n        continentCounts[continent] = (continentCounts[continent] || 0) + 1;\n      });\n      this.cityAssetCount = Object.keys(cityCounts).length;\n      this.continentAssetCount = Object.keys(continentCounts).length;\n    }\n  },\n  methods: {\n    async logout() {\n      try {\n        const response = await fetch('http://localhost:3000/logout', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          localStorage.removeItem('token');\n          this.$router.push('/login');\n        } else {\n          this.errorMessage = 'Failed to logout';\n        }\n      } catch (error) {\n        console.error('Error logging out:', error);\n        this.errorMessage = 'Error logging out';\n      }\n    },\n    async fetchAssets() {\n      try {\n        const response = await fetch('http://localhost:3000/assets', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        if (response.ok) {\n          this.assets = await response.json();\n        } else {\n          throw new Error('Failed to fetch assets');\n        }\n      } catch (error) {\n        this.errorMessage = 'Error fetching assets';\n      }\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      this.$router.push('/login');\n    } else {\n      this.fetchAssets();\n    }\n  }\n};","map":{"version":3,"names":["data","username","errorMessage","assets","cityFilter","contFilter","cityAssetCount","continentAssetCount","computed","filteredAssets","filtered","filter","asset","location","toLowerCase","includes","continent","cityOptions","cities","map","item","contOptions","uniqueContinents","Set","calculateAssetCounts","cityCounts","continentCounts","forEach","city","Object","keys","length","methods","logout","response","fetch","method","headers","ok","localStorage","removeItem","$router","push","error","console","fetchAssets","getItem","json","Error","mounted","token"],"sources":["src/views/DashboardWeb.vue"],"sourcesContent":["<template>\n  <div>\n\n    <div class=\"field\">\n      <button @click=\"logout\" class=\"button is-primary is-pulled-left\">Logout</button>\n    </div>\n\n\n    <div class=\"has-text-centered\">\n      <h2>Dashboard</h2>\n    </div>\n\n    <br><hr>\n    <p class=\"has-text-centered has-text-weight-bold\">{{ errorMessage }}</p>\n      <div class=\"filters\">\n          <label for=\"cityFilter\">City Location:</label>\n          <select v-model=\"cityFilter\">\n            <option value=\"\">All</option>\n            <option v-for=\"city in cityOptions\" :key=\"city\">{{ city }}</option>\n          </select>\n      </div>\n      <br>\n      <div class=\"filters\">\n          <label for=\"contFilter\">Continents:</label>\n          <select v-model=\"contFilter\">\n            <option value=\"\">All</option>\n            <option v-for=\"cont in contOptions\" :key=\"cont\">{{ cont }}</option>\n          </select>\n      </div>\n    <br>\n    <table>\n      <thead>\n        <tr>\n          <th>Asset</th>\n          <th>Value ($)</th>\n          <th>Location</th>\n          <th>Continent</th>\n          <th>Holding Duration</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(asset, index) in filteredAssets\" :key=\"index\">\n          <td>{{ asset.name }}</td>\n          <td>{{ asset.value }}</td>\n          <td>{{ asset.location }}</td>\n          <td>{{ asset.continent }}</td>\n          <td>{{ asset.duration }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: '',\n      errorMessage: '',\n      assets: [],\n      cityFilter: '',\n      contFilter: '',\n      cityAssetCount: 0,\n      continentAssetCount: 0\n    }\n  },\n  computed: {\n    filteredAssets() {\n      let filtered = this.assets;\n\n      if (this.cityFilter) {\n        filtered = filtered.filter(asset => asset.location.toLowerCase().includes(this.cityFilter.toLowerCase()));\n      }\n\n      if (this.contFilter) {\n        filtered = filtered.filter(asset => asset.continent.toLowerCase().includes(this.contFilter.toLowerCase()));\n      }\n\n      return filtered;\n    },\n    cityOptions() {\n      let cities = this.assets.map(item => item.location);\n      return cities;\n    },\n    contOptions() {\n        const uniqueContinents = new Set(this.assets.map(item => item.continent.toLowerCase()));\n        return [...uniqueContinents];\n    },\n    calculateAssetCounts() {\n        const cityCounts = {};\n        const continentCounts = {};\n\n        this.assets.forEach(asset => {\n            const city = asset.location.toLowerCase();\n            const continent = asset.continent.toLowerCase();\n\n            cityCounts[city] = (cityCounts[city] || 0) + 1;\n            continentCounts[continent] = (continentCounts[continent] || 0) + 1;\n        });\n\n        this.cityAssetCount = Object.keys(cityCounts).length;\n        this.continentAssetCount = Object.keys(continentCounts).length;\n    }\n  },\n  methods: {\n    async logout() {\n      try {\n        const response = await fetch('http://localhost:3000/logout', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          localStorage.removeItem('token');\n          this.$router.push('/login');\n        } else {\n          this.errorMessage = 'Failed to logout';\n        }\n      } catch (error) {\n        console.error('Error logging out:', error);\n        this.errorMessage = 'Error logging out';\n      }\n    },\n    async fetchAssets() {\n      try {\n        const response = await fetch('http://localhost:3000/assets', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        if (response.ok) {\n          this.assets = await response.json();\n        } else {\n          throw new Error('Failed to fetch assets');\n        }\n      } catch (error) {\n        this.errorMessage = 'Error fetching assets';\n      }\n    }\n  },\n  mounted() {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      this.$router.push('/login');\n    } else {\n      this.fetchAssets();\n    }\n  }\n}\n</script>\n\n<style>\n.has-text-weight-bold {\n  font-weight: bold;\n}\n.has-text-centered {\n  text-align: center;\n}\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\nth {\n  background-color: #f2f2f2;\n}\n</style>\n"],"mappings":";AAsDA;EACAA,KAAA;IACA;MACAC,QAAA;MACAC,YAAA;MACAC,MAAA;MACAC,UAAA;MACAC,UAAA;MACAC,cAAA;MACAC,mBAAA;IACA;EACA;EACAC,QAAA;IACAC,eAAA;MACA,IAAAC,QAAA,QAAAP,MAAA;MAEA,SAAAC,UAAA;QACAM,QAAA,GAAAA,QAAA,CAAAC,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAC,QAAA,CAAAC,WAAA,GAAAC,QAAA,MAAAX,UAAA,CAAAU,WAAA;MACA;MAEA,SAAAT,UAAA;QACAK,QAAA,GAAAA,QAAA,CAAAC,MAAA,CAAAC,KAAA,IAAAA,KAAA,CAAAI,SAAA,CAAAF,WAAA,GAAAC,QAAA,MAAAV,UAAA,CAAAS,WAAA;MACA;MAEA,OAAAJ,QAAA;IACA;IACAO,YAAA;MACA,IAAAC,MAAA,QAAAf,MAAA,CAAAgB,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAP,QAAA;MACA,OAAAK,MAAA;IACA;IACAG,YAAA;MACA,MAAAC,gBAAA,OAAAC,GAAA,MAAApB,MAAA,CAAAgB,GAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAJ,SAAA,CAAAF,WAAA;MACA,WAAAQ,gBAAA;IACA;IACAE,qBAAA;MACA,MAAAC,UAAA;MACA,MAAAC,eAAA;MAEA,KAAAvB,MAAA,CAAAwB,OAAA,CAAAf,KAAA;QACA,MAAAgB,IAAA,GAAAhB,KAAA,CAAAC,QAAA,CAAAC,WAAA;QACA,MAAAE,SAAA,GAAAJ,KAAA,CAAAI,SAAA,CAAAF,WAAA;QAEAW,UAAA,CAAAG,IAAA,KAAAH,UAAA,CAAAG,IAAA;QACAF,eAAA,CAAAV,SAAA,KAAAU,eAAA,CAAAV,SAAA;MACA;MAEA,KAAAV,cAAA,GAAAuB,MAAA,CAAAC,IAAA,CAAAL,UAAA,EAAAM,MAAA;MACA,KAAAxB,mBAAA,GAAAsB,MAAA,CAAAC,IAAA,CAAAJ,eAAA,EAAAK,MAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,OAAA;MACA;QACA,MAAAC,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA;UACA;QACA;QACA,IAAAH,QAAA,CAAAI,EAAA;UACAC,YAAA,CAAAC,UAAA;UACA,KAAAC,OAAA,CAAAC,IAAA;QACA;UACA,KAAAxC,YAAA;QACA;MACA,SAAAyC,KAAA;QACAC,OAAA,CAAAD,KAAA,uBAAAA,KAAA;QACA,KAAAzC,YAAA;MACA;IACA;IACA,MAAA2C,YAAA;MACA;QACA,MAAAX,QAAA,SAAAC,KAAA;UACAC,MAAA;UACAC,OAAA;YACA,2BAAAE,YAAA,CAAAO,OAAA;UACA;QACA;QACA,IAAAZ,QAAA,CAAAI,EAAA;UACA,KAAAnC,MAAA,SAAA+B,QAAA,CAAAa,IAAA;QACA;UACA,UAAAC,KAAA;QACA;MACA,SAAAL,KAAA;QACA,KAAAzC,YAAA;MACA;IACA;EACA;EACA+C,QAAA;IACA,MAAAC,KAAA,GAAAX,YAAA,CAAAO,OAAA;IACA,KAAAI,KAAA;MACA,KAAAT,OAAA,CAAAC,IAAA;IACA;MACA,KAAAG,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}